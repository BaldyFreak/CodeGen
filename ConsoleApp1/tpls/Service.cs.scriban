using Ardalis.Specification.EntityFrameworkCore;
using Garen.MultiTenant.Service.{{genClass.ModuleName}}.Specifications;
using Garen.MultiTenant.Core.Entities;
using Garen.MultiTenant.Core.Extensions;
using Garen.MultiTenant.Infrastructure.Database.DbContexts;
using Microsoft.EntityFrameworkCore;

namespace Garen.MultiTenant.Service.{{genClass.ModuleName}}
{
    public partial class {{genClass.ClassName}}Service : RepositoryBase<{{genClass.ClassName}}>
    {
        private readonly {{genClass.DbContextName}} _context;

        public {{genClass.ClassName}}Service({{genClass.DbContextName}} context) : base(context)
        {
            _context = context;
        }
        public async Task<List<{{genClass.ClassName}}>> GetPage({{genClass.ClassName}} {{genClass.BusinessName}})
        {
            var spec = new {{genClass.ClassName}}Specification({{genClass.BusinessName}});
            return await ApplySpecification(spec).StartPage({{genClass.BusinessName}}).ToListAsync();
        }
        public async Task<List<{{genClass.ClassName}}>> GetPage(int pageNum,int pageSize)
        {
            return await _context.{{genClass.ClassName}}.StartPage(pageNum,pageSize).ToListAsync();
        }
        public async Task DeleteRange({{genClass.PkProp.PropType}} [] ids)
        {
            var {{genClass.BusinessName}}s = await _context.{{genClass.ClassName}}.Where(x=>ids.Contains(x.{{genClass.PkProp.PropName}})).ToListAsync();
            await DeleteRangeAsync({{genClass.BusinessName}}s);
        }
    }

}
