using Ardalis.Specification;
using Garen.MultiTenant.Core.Entities;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory;

namespace Garen.MultiTenant.Service.{{genClass.ModuleName}}.Specifications
{
    public class {{genClass.ClassName}}Specification : Specification<{{genClass.ClassName}}>
    {
        public {{genClass.ClassName}}Specification({{genClass.ClassName}} {{genClass.BusinessName}})
        {
        {{~ for prop in genClass.Props ~}}
        {{~ if (prop.IsQuery && !prop.IsPk)~}}
            {{~ if (prop.HtmlType=="input" && prop.QueryType == "LIKE") ~}}
            if (!string.IsNullOrEmpty({{genClass.BusinessName}}.{{prop.PropName}}))
            {
                Query.Where(x => EF.Functions.Like(x.{{prop.PropName}}, $"%{ {{~genClass.BusinessName}}.{{prop.PropName~}} }%"));
            }
            {{~ else if (prop.HtmlType=="input" && prop.QueryType != "LIKE") ~}}
            if (!string.IsNullOrEmpty({{genClass.BusinessName}}.{{prop.PropName}}))
            {
                Query.Where(x => x.{{prop.PropName}} {{prop.QueryType}} {{genClass.BusinessName}}.{{prop.PropName}});
            }
            {{~ else if (prop.HtmlType=="datetime" && prop.QueryType == "BETWEEN") ~}}
            if ({{genClass.BusinessName}}.Params != null && {{genClass.BusinessName}}.Params.Count > 0)
            {
                if (!string.IsNullOrEmpty({{genClass.BusinessName}}.Params["begin{{prop.PropName}}"]))
                {
                    var begin{{prop.PropName}} = DateTime.Parse({{genClass.BusinessName}}.Params["begin{{prop.PropName}}"]);
                    Query.Where(x => x.{{prop.PropName}} >= begin{{prop.PropName}});
                }
                if (!string.IsNullOrEmpty({{genClass.BusinessName}}.Params["end{{prop.PropName}}"]))
                {
                    var end{{prop.PropName}} = DateTime.Parse({{genClass.BusinessName}}.Params["end{{prop.PropName}}"]);
                    Query.Where(x => x.{{prop.PropName}} <= end{{prop.PropName}});
                }
            }
            {{~ else if (prop.HtmlType=="datetime" && prop.QueryType != "BETWEEN") ~}}
                Query.Where(x => x.{{prop.PropName}} {{prop.QueryType}} {{genClass.BusinessName}}.{{prop.PropName}});
            {{~ else if (prop.HtmlType=="select" || prop.HtmlType=="checkbox" || prop.HtmlType=="radio") ~}}
            if (!string.IsNullOrEmpty({{genClass.BusinessName}}.{{prop.PropName}}))
            {
                Query.Where(x => x.{{prop.PropName}} == {{genClass.BusinessName}}.{{prop.PropName}});
            }
            {{~ end ~}}
        {{~ end ~}}
        {{~ end ~}}
        }
    }
}
