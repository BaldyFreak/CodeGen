{{- ## 全局私有变量 开始 ## -}}
{{~ _moduleNameUnCapitalize=(moduleName | uncapitalize) ~}}
{{~ _businessNameCapitalize=(genClass.BusinessName | string.capitalize) ~}}
{{- ## 全局私有变量 结束 ## -}}
<template>
    <div class="app-container">
        <el-form :model="queryParams" ref="queryForm" size="small" :inline="true" v-show="showSearch" label-width="68px">
        {{~ for prop in genClass.Props ~}}
        {{~ if(prop.IsQuery) ~}}
            {{~ if (prop.HtmlType == "input") ~}}
            <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                <el-input
                    v-model="queryParams.{{prop.PropName | uncapitalize}}"
                    placeholder="请输入{{prop.PropDescription}}"
                    clearable
                    @keyup.enter.native="handleQuery"
                />
            </el-form-item>
            {{~ end ~}}
            {{~ if (prop.HtmlType == "select" || prop.HtmlType == "radio" && prop.DictType != "") ~}}
            <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                <el-select v-model="queryParams.{{prop.PropName | uncapitalize}}" placeholder="请选择{{prop.PropDescription}}" clearable>
                <el-option
                    v-for="dict in dict.type.{{prop.DictType}}"
                    :key="dict.value"
                    :label="dict.label"
                    :value="dict.value"
                />
                </el-select>
            </el-form-item>
            {{~ end ~}}
            {{~ if (prop.HtmlType == "select" || prop.HtmlType == "radio" && prop.DictType == "") ~}}
            <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                <el-select v-model="queryParams.{{prop.PropName | uncapitalize}}" placeholder="请选择{{prop.PropDescription}}" clearable>
                    <el-option label="请选择字典生成" value=""/>
                </el-select>
            </el-form-item>
            {{~ end ~}}
            {{~ if (prop.HtmlType == "datetime" && prop.QueryType != "BETWEEN") ~}}
            <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                <el-date-picker clearable
                    v-model="queryParams.{{prop.PropName | uncapitalize}}"
                    type="date"
                    value-format="yyyy-MM-dd"
                    placeholder="请选择{{prop.PropDescription}}">
                </el-date-picker>
            </el-form-item>
            {{~ end ~}}
            {{~ if (prop.HtmlType == "datetime" && prop.QueryType == "BETWEEN") ~}}
            <el-form-item label="{{prop.PropDescription}}">
                <el-date-picker
                    v-model="daterange{{prop.PropName}}"
                    style="width: 240px"
                    value-format="yyyy-MM-dd"
                    type="daterange"
                    range-separator="-"
                    start-placeholder="开始日期"
                    end-placeholder="结束日期"
                ></el-date-picker>
            </el-form-item>
            {{~ end ~}}
        {{~ end ~}}
        {{~ end ~}}
            <el-form-item>
                <el-button type="primary" icon="el-icon-search" size="mini" @click="handleQuery">搜索</el-button>
                <el-button icon="el-icon-refresh" size="mini" @click="resetQuery">重置</el-button>
            </el-form-item>
        </el-form>

        <el-row :gutter="10" class="mb8">
            <el-col :span="1.5">
                <el-button type="primary" plain icon="el-icon-plus" size="mini" @click="handleAdd"
                    v-hasPermi="['{{_moduleNameUnCapitalize}}:{{genClass.BusinessName}}:add']">新增</el-button>
            </el-col>
            <el-col :span="1.5">
                <el-button type="success" plain icon="el-icon-edit" size="mini" :disabled="single" @click="handleUpdate"
                    v-hasPermi="['{{_moduleNameUnCapitalize}}:{{genClass.BusinessName}}:edit']">修改</el-button>
            </el-col>
            <el-col :span="1.5">
                <el-button type="danger" plain icon="el-icon-delete" size="mini" :disabled="multiple" @click="handleDelete"
                    v-hasPermi="['{{_moduleNameUnCapitalize}}:{{genClass.BusinessName}}:remove']">删除</el-button>
            </el-col>
            <el-col :span="1.5">
                <el-button type="warning" plain icon="el-icon-download" size="mini" @click="handleExport"
                    v-hasPermi="['{{_moduleNameUnCapitalize}}:{{genClass.BusinessName}}:export']">导出</el-button>
            </el-col>
            <right-toolbar :showSearch.sync="showSearch" @queryTable="getList"></right-toolbar>
        </el-row>

        <el-table v-loading="loading" :data="{{genClass.BusinessName}}List" @selection-change="handleSelectionChange">
            <el-table-column type="selection" width="55" align="center" />
        {{~ for prop in genClass.Props ~}}
            {{~ if(prop.IsPk) ~}}
            <el-table-column label="{{prop.PropDescription}}" align="center" prop="{{prop.PropName | uncapitalize}}" />
            {{~ else if(prop.IsList && prop.HtmlType == "datetime") ~}}
            <el-table-column label="{{prop.PropDescription}}" align="center" prop="{{prop.PropName | uncapitalize}}" width="180">
                <template slot-scope="scope">
                  <span>{%{ {{ }%} parseTime(scope.row.{{prop.PropName | uncapitalize}}, '{y}-{m}-{d}') {%{ }} }%}</span>
                </template>
            </el-table-column>
            {{~ else if(prop.IsList && prop.HtmlType == "imageUpload") ~}}
            <el-table-column label="{{prop.PropDescription}}" align="center" prop="{{prop.PropName | uncapitalize}}" width="100">
                <template slot-scope="scope">
                  <image-preview :src="scope.row.{{prop.PropName | uncapitalize}}" :width="50" :height="50"/>
                </template>
            </el-table-column>
            {{~ else if(prop.IsList && prop.DictType != "") ~}}
            <el-table-column label="{{prop.PropDescription}}" align="center" prop="{{prop.PropName | uncapitalize}}">
                <template slot-scope="scope">
                    {{~ if(prop.HtmlType == "checkbox") ~}}
                      <dict-tag :options="dict.type.{{prop.DictType}}"
                                :value="scope.row.{{prop.PropName | uncapitalize}} ? scope.row.{{prop.PropName | uncapitalize}}.split(',') : []"/>
                    {{~ else ~}}
                      <dict-tag :options="dict.type.{{prop.DictType}}" :value="scope.row.{{prop.PropName | uncapitalize}}"/>
                    {{~ end ~}}
                </template>
            </el-table-column>
            {{~ else if(prop.IsList && prop.PropName != "") ~}}
            <el-table-column label="{{prop.PropDescription}}" align="center" prop="{{prop.PropName | uncapitalize}}"/>
            {{~ end ~}}
        {{~ end ~}}
            <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
                <template slot-scope="scope">
                    <el-button size="mini" type="text" icon="el-icon-edit" @click="handleUpdate(scope.row)"
                        v-hasPermi="['{{_moduleNameUnCapitalize}}:{{genClass.BusinessName}}:edit']">修改</el-button>
                    <el-button size="mini" type="text" icon="el-icon-delete" @click="handleDelete(scope.row)"
                        v-hasPermi="['{{_moduleNameUnCapitalize}}:{{genClass.BusinessName}}:remove']">删除</el-button>
                </template>
            </el-table-column>
        </el-table>

        <pagination v-show="total > 0" :total="total" :page.sync="queryParams.pageNum" :limit.sync="queryParams.pageSize"
            @pagination="getList" />

        <!-- 添加或修改{{genClass.ClassDescription}}信息对话框 -->
        <el-dialog :title="title" :visible.sync="open" width="500px" append-to-body>
            <el-form ref="form" :model="form" :rules="rules" label-width="80px">
            {{~ for prop in genClass.Props ~}}
            {{~ if(prop.IsInsert && !prop.IsPk) ~}}
                {{~ if(prop.HtmlType == "input") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-input v-model="form.{{prop.PropName | uncapitalize}}" placeholder="请输入{{prop.PropDescription}}"/>
                </el-form-item>
                {{~ else if(prop.HtmlType == "imageUpload") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <image-upload v-model="form.{{prop.PropName | uncapitalize}}"/>
                </el-form-item>
                {{~ else if(prop.HtmlType == "fileUpload") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <file-upload v-model="form.{{prop.PropName | uncapitalize}}"/>
                </el-form-item>
                {{~ else if(prop.HtmlType == "editor") ~}}
                <el-form-item label="{{prop.PropDescription}}">
                    <editor v-model="form.{{prop.PropName | uncapitalize}}" :min-height="192"/>
                </el-form-item>
                {{~ else if(prop.HtmlType == "select" && prop.DictType != "") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-select v-model="form.{{prop.PropName | uncapitalize}}" placeholder="请选择{{prop.PropDescription}}">
                    <el-option
                        v-for="dict in dict.type.{{prop.DictType}}"
                        :key="dict.value"
                        :label="dict.label"
                        {{~ if(prop.PropType == "int" || prop.PropType == "long") ~}}
                        :value="parseInt(dict.value)"
                        {{~ else ~}}
                        :value="dict.value"
                        {{~ end ~}}
                    ></el-option>
                    </el-select>
                </el-form-item>
                {{~ else if(prop.HtmlType == "select" && prop.DictType == "") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-select v-model="form.{{prop.PropName | uncapitalize}}" placeholder="请选择{{prop.PropDescription}}">
                    <el-option label="请选择字典生成" value=""/>
                    </el-select>
                </el-form-item>
                {{~ else if(prop.HtmlType == "checkbox" && prop.DictType != "") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-checkbox-group v-model="form.{{prop.PropName | uncapitalize}}">
                    <el-checkbox
                        v-for="dict in dict.type.{{prop.DictType}}"
                        :key="dict.value"
                        :label="dict.value">
                        {{dict.label}}
                    </el-checkbox>
                    </el-checkbox-group>
                </el-form-item>
                {{~ else if(prop.HtmlType == "checkbox" && prop.DictType == "") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-checkbox-group v-model="form.{{prop.PropName | uncapitalize}}">
                    <el-checkbox>请选择字典生成</el-checkbox>
                    </el-checkbox-group>
                </el-form-item>
                {{~ else if(prop.HtmlType == "radio" && prop.DictType != "") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-radio-group v-model="form.{{prop.PropName | uncapitalize}}">
                    <el-radio
                        v-for="dict in dict.type.{{prop.DictType}}"
                        :key="dict.value"
                        {{~ if(prop.PropType == "int" || prop.PropType == "long") ~}}
                        :label="parseInt(dict.value)"
                        {{~ else ~}}
                        :label="dict.value"
                        {{~ end ~}}
                    >{{dict.label}}
                    </el-radio>
                    </el-radio-group>
                </el-form-item>
                {{~ else if(prop.HtmlType == "radio" && prop.DictType == "") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-radio-group v-model="form.{{prop.PropName | uncapitalize}}">
                    <el-radio label="1">请选择字典生成</el-radio>
                    </el-radio-group>
                </el-form-item>
                {{~ else if(prop.HtmlType == "datetime") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-date-picker clearable
                                    v-model="form.{{prop.PropName | uncapitalize}}"
                                    type="date"
                                    value-format="yyyy-MM-dd"
                                    placeholder="请选择{{prop.PropDescription}}">
                    </el-date-picker>
                </el-form-item>
                {{~ else if(prop.HtmlType == "textarea") ~}}
                <el-form-item label="{{prop.PropDescription}}" prop="{{prop.PropName | uncapitalize}}">
                    <el-input v-model="form.{{prop.PropName | uncapitalize}}" type="textarea" placeholder="请输入内容"/>
                </el-form-item>
                {{~ end ~}}
            {{~ end ~}}
            {{~ end ~}}
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button type="primary" @click="submitForm">确 定</el-button>
                <el-button @click="cancel">取 消</el-button>
            </div>
        </el-dialog>
    </div>
</template>
  
<script>
import { list{{_businessNameCapitalize}}, get{{_businessNameCapitalize}}, del{{_businessNameCapitalize}}, add{{_businessNameCapitalize}}, update{{_businessNameCapitalize}} } from "@/api/system/{{genClass.BusinessName}}";

export default {
    name: "{{genClass.BusinessName}}",
    {{~if (dicts != "")~}}
    dicts: [{{dicts}}],
    {{~end~}}
    data() {
        return {
            // 遮罩层
            loading: true,
            // 选中数组
            ids: [],
            // 非单个禁用
            single: true,
            // 非多个禁用
            multiple: true,
            // 显示搜索条件
            showSearch: true,
            // 总条数
            total: 0,
            // {{genClass.ClassDescription}}信息表格数据
            {{genClass.BusinessName}}List: [],
            // 弹出层标题
            title: "",
            // 是否显示弹出层
            open: false,
            {{~ for prop in genClass.Props ~}}
            {{~ if(prop.HtmlType == "datetime" && prop.QueryType == "BETWEEN") ~}}
            daterange{{prop.PropName}}: [],
            {{~ end ~}}
            {{~ end ~}}
            // 查询参数
            queryParams: {
                pageNum: 1,
                pageSize: 10,
                {{~ for prop in genClass.Props ~}}
                {{~ if(prop.IsQuery) ~}}
                {{prop.PropName | uncapitalize}}: null{{if(for.index != array.size(genClass.Props))}},{{end}}
                {{~ end ~}}
                {{~ end ~}}
            },
            // 表单参数
            form: {},
            // 表单校验
            rules: {
                {{~for prop in genClass.Props~}}
                {{~ if(prop.IsRequired) ~}}
                {{prop.PropName | uncapitalize}}: [
                    { required: true, message: "{{prop.PropDescription}}不能为空", trigger: {{if(prop.HtmlType == "select" || prop.HtmlType == "radio")}}"change"{{else}}"blur"{{end}} }
                ]{{if(for.index != array.size(genClass.Props))}},{{end}}
                {{~ end ~}}
                {{~ end ~}}
            }
        };
    },
    created() {
        this.getList();
    },
    methods: {
        /** 查询{{genClass.ClassDescription}}信息列表 */
        getList() {
            this.loading = true;
            {{~ for prop in genClass.Props ~}}
            {{~ if(prop.HtmlType == "datetime" && prop.QueryType == "BETWEEN") ~}}
            this.queryParams.params = {};
            {{~ end ~}}
            {{~ end ~}}

            {{~ for prop in genClass.Props ~}}
            {{~ if(prop.HtmlType == "datetime" && prop.QueryType == "BETWEEN") ~}}
            if (null != this.daterange{{prop.PropName}} && '' != this.daterange{{prop.PropName}}) {
                this.queryParams.params["begin{{prop.PropName}}"] = this.daterange{{prop.PropName}}[0];
                this.queryParams.params["end{{prop.PropName}}"] = this.daterange{{prop.PropName}}[1];
            }
            {{~ end ~}}
            {{~ end ~}}

            list{{_businessNameCapitalize}}(this.queryParams).then(response => {
                this.{{genClass.BusinessName}}List = response.rows;
                this.total = response.total;
                this.loading = false;
            });
        },
        // 取消按钮
        cancel() {
            this.open = false;
            this.reset();
        },
        // 表单重置
        reset() {
            this.form = {
            {{~ for prop in genClass.Props ~}}
            {{~ if(prop.HtmlType == "checkbox") ~}}
            {{prop.PropName | uncapitalize}}:[]{{if(for.index != array.size(genClass.Props))}},{{end}}
            {{~ else ~}}
            {{prop.PropName | uncapitalize}}:null{{if(for.index != array.size(genClass.Props))}},{{end}}
            {{~ end ~}}
            {{~ end ~}}
            };
            this.resetForm("form");
        },
        /** 搜索按钮操作 */
        handleQuery() {
            this.queryParams.pageNum = 1;
            this.getList();
        },
        /** 重置按钮操作 */
        resetQuery() {
            {{~ for prop in genClass.Props ~}}
            {{~ if(prop.HtmlType == "datetime" && prop.QueryType == "BETWEEN") ~}}
            this.daterange{{prop.PropName}} = [];
            {{~ end ~}}
            {{~ end ~}}
            this.resetForm("queryForm");
            this.handleQuery();
        },
        // 多选框选中数据
        handleSelectionChange(selection) {
            this.ids = selection.map(item => item.{{genClass.PkProp.PropName | uncapitalize}})
            this.single = selection.length !== 1
            this.multiple = !selection.length
        },
        /** 新增按钮操作 */
        handleAdd() {
            this.reset();
            this.open = true;
            this.title = "添加{{genClass.ClassDescription}}信息";
        },
        /** 修改按钮操作 */
        handleUpdate(row) {
            this.reset();
            const {{genClass.PkProp.PropName | uncapitalize}} = row.{{genClass.PkProp.PropName | uncapitalize}} || this.ids
            get{{_businessNameCapitalize}}({{genClass.PkProp.PropName | uncapitalize}}).then(response => {
                this.form = response.data;
                {{~ for prop in genClass.Props ~}}
                {{~ if(prop.HtmlType == "checkbox") ~}}
                this.form.{{prop.PropName | uncapitalize}} = this.form.{{prop.PropName | uncapitalize}}.split(",");
                {{~ end ~}}
                {{~ end ~}}
                this.open = true;
                this.title = "修改{{genClass.ClassDescription}}信息";
            });
        },
        /** 提交按钮 */
        submitForm() {
            this.$refs["form"].validate(valid => {
                if (valid) {
                    {{~ for prop in genClass.Props ~}}
                    {{~ if(prop.HtmlType == "checkbox") ~}}
                    this.form.{{prop.PropName | uncapitalize}} = this.form.{{prop.PropName | uncapitalize}}.join(",");
                    {{~ end ~}}
                    {{~ end ~}}
                    if (this.form.{{genClass.PkProp.PropName | uncapitalize}} != null) {
                        update{{_businessNameCapitalize}}(this.form).then(response => {
                            this.$modal.msgSuccess("修改成功");
                            this.open = false;
                            this.getList();
                        });
                    } else {
                        add{{_businessNameCapitalize}}(this.form).then(response => {
                            this.$modal.msgSuccess("新增成功");
                            this.open = false;
                            this.getList();
                        });
                    }
                }
            });
        },
        /** 删除按钮操作 */
        handleDelete(row) {
            const {{genClass.PkProp.PropName | uncapitalize}}s = row.{{genClass.PkProp.PropName | uncapitalize}} || this.ids;
            this.$modal.confirm('是否确认删除{{genClass.ClassDescription}}信息编号为"' + {{genClass.PkProp.PropName | uncapitalize}}s + '"的数据项？').then(function () {
                return del{{_businessNameCapitalize}}({{genClass.PkProp.PropName | uncapitalize}}s);
            }).then(() => {
                this.getList();
                this.$modal.msgSuccess("删除成功");
            }).catch(() => { });
        },
        /** 导出按钮操作 */
        handleExport() {
            this.download('system/{{genClass.BusinessName}}/export', {
                ...this.queryParams
            }, `{{genClass.BusinessName}}_${new Date().getTime()}.xlsx`)
        }
    }
};
</script>
  